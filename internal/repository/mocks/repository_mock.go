// Code generated by MockGen. DO NOT EDIT.
// Source: drone/internal/repository (interfaces: Repository)

package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	repository "drone/internal/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockRepository) CreateEstate(ctx context.Context, width, length int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, width, length)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryMockRecorder) CreateEstate(ctx, width, length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepository)(nil).CreateEstate), ctx, width, length)
}

// CreateTree mocks base method.
func (m *MockRepository) CreateTree(ctx context.Context, estateID uuid.UUID, x, y, height int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, estateID, x, y, height)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockRepositoryMockRecorder) CreateTree(ctx, estateID, x, y, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockRepository)(nil).CreateTree), ctx, estateID, x, y, height)
}

// GetEstate mocks base method.
func (m *MockRepository) GetEstate(ctx context.Context, id uuid.UUID) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstate", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEstate indicates an expected call of GetEstate.
func (mr *MockRepositoryMockRecorder) GetEstate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstate", reflect.TypeOf((*MockRepository)(nil).GetEstate), ctx, id)
}

// GetTrees mocks base method.
func (m *MockRepository) GetTrees(ctx context.Context, estateID uuid.UUID) ([]repository.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrees", ctx, estateID)
	ret0, _ := ret[0].([]repository.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrees indicates an expected call of GetTrees.
func (mr *MockRepositoryMockRecorder) GetTrees(ctx, estateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrees", reflect.TypeOf((*MockRepository)(nil).GetTrees), ctx, estateID)
} 