// Code generated by MockGen. DO NOT EDIT.
// Source: drone/internal/service (interfaces: Service)

package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	repository "drone/internal/repository"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockService) CreateEstate(ctx context.Context, width, length int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, width, length)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockServiceMockRecorder) CreateEstate(ctx, width, length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockService)(nil).CreateEstate), ctx, width, length)
}

// GetEstate mocks base method.
func (m *MockService) GetEstate(ctx context.Context, id uuid.UUID) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstate", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEstate indicates an expected call of GetEstate.
func (mr *MockServiceMockRecorder) GetEstate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstate", reflect.TypeOf((*MockService)(nil).GetEstate), ctx, id)
}

// ListEstates mocks base method.
func (m *MockService) ListEstates(ctx context.Context) ([]repository.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEstates", ctx)
	ret0, _ := ret[0].([]repository.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEstates indicates an expected call of ListEstates.
func (mr *MockServiceMockRecorder) ListEstates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEstates", reflect.TypeOf((*MockService)(nil).ListEstates), ctx)
}

// CreateTree mocks base method.
func (m *MockService) CreateTree(ctx context.Context, estateID uuid.UUID, x, y, height int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, estateID, x, y, height)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockServiceMockRecorder) CreateTree(ctx, estateID, x, y, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockService)(nil).CreateTree), ctx, estateID, x, y, height)
}

// GetTreeStats mocks base method.
func (m *MockService) GetTreeStats(ctx context.Context, estateID uuid.UUID) (int, int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeStats", ctx, estateID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTreeStats indicates an expected call of GetTreeStats.
func (mr *MockServiceMockRecorder) GetTreeStats(ctx, estateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeStats", reflect.TypeOf((*MockService)(nil).GetTreeStats), ctx, estateID)
}

// CalculateDronePath mocks base method.
func (m *MockService) CalculateDronePath(ctx context.Context, estateID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDronePath", ctx, estateID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateDronePath indicates an expected call of CalculateDronePath.
func (mr *MockServiceMockRecorder) CalculateDronePath(ctx, estateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDronePath", reflect.TypeOf((*MockService)(nil).CalculateDronePath), ctx, estateID)
}

// CalculateDronePathWithRest mocks base method.
func (m *MockService) CalculateDronePathWithRest(ctx context.Context, estateID uuid.UUID, maxDistance int) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDronePathWithRest", ctx, estateID, maxDistance)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CalculateDronePathWithRest indicates an expected call of CalculateDronePathWithRest.
func (mr *MockServiceMockRecorder) CalculateDronePathWithRest(ctx, estateID, maxDistance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDronePathWithRest", reflect.TypeOf((*MockService)(nil).CalculateDronePathWithRest), ctx, estateID, maxDistance)
} 